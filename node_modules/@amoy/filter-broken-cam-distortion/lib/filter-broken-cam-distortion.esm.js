/*!
 * @amoy/filter-broken-cam-distortion - v3.0.21
 * Compiled Thu, 21 Nov 2019 07:47:39 UTC
 *
 * @amoy/filter-broken-cam-distortion is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
import { Filter } from '@pixi/core';

var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";

var fragment = "varying vec2 vTextureCoord;//passed from vect shader \n\nuniform sampler2D uSampler; // 2d texture\nuniform float uTime;\n\nfloat rand(float co) {\n    return fract(sin(dot(co,12.9898+78.233)) * 43758.5453);\n}\n\nvoid main(void) {\n\tvec2 uv = vTextureCoord;\n\tvec2 uv1 = uv;\n    uv1.y-=rand(uv.x*uTime)/60.;\n    \n    vec4 e = texture2D(uSampler,uv1);\n    vec4 bn = vec4(vec3(e.r+e.g+e.b)/3.,1.0);\n\t\n\tvec2 offset = vec2(0.01*rand(uTime),sin(uTime)/30.);\n\te.r = texture2D(uSampler, uv+offset.xy).r;\n\te.g = texture2D(uSampler, uv).g;\n\te.b = texture2D(uSampler, uv+offset.yx).b;\n\n    if(sin(uTime*rand(uTime))<0.99) {\n        gl_FragColor=mix(e,bn,0.6);\n    } else {\n        uv.y+=rand(uTime)/(sin(uTime)*10.);\n        uv.x-=rand(uTime+2.)/(sin(uTime)*10.)/30.;\n        gl_FragColor=texture2D(uSampler,uv);\n    }\n}";

/**
 * The AmoyBrokenCamDistortionFilter applies the effect to an object.<br>
 * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/AmoyBrokenCamDistortionFilter.gif)
 *
 * @class
 * @extends PIXI.Filter
 * @memberof AMOY.filters
 * @see {@link https://www.npmjs.com/package/@amoy/filter-broken-cam-distortion}
 * @see {@link https://www.npmjs.com/package/@amoy/filters}
 * @param {number} [delta=0] - For animating interlaced lines
 */

var AmoyBrokenCamDistortionFilter = /*@__PURE__*/(function (Filter) {
    function AmoyBrokenCamDistortionFilter(delta){
        if ( delta === void 0 ) delta = 0;

        Filter.call(this, vertex, fragment);
        this.delta = delta;
    }

    if ( Filter ) AmoyBrokenCamDistortionFilter.__proto__ = Filter;
    AmoyBrokenCamDistortionFilter.prototype = Object.create( Filter && Filter.prototype );
    AmoyBrokenCamDistortionFilter.prototype.constructor = AmoyBrokenCamDistortionFilter;

    var prototypeAccessors = { delta: { configurable: true } };

    /**
     * Override existing apply method in PIXI.Filter
     * @private
     */
    AmoyBrokenCamDistortionFilter.prototype.apply = function apply (filterManager, input, output, clear) {
        this.uniforms.uTime = this.delta <= 0 ? 0 : this.delta;
        filterManager.applyFilter(this, input, output, clear);
    };

    /**
     * time for animation
     *
     * @member {number}
     * @default 0.0
     */
    prototypeAccessors.delta.get = function () {
        return this.uniforms.uTime;
    };

    prototypeAccessors.delta.set = function (value) {
        this.uniforms.uTime = value;
    };

    Object.defineProperties( AmoyBrokenCamDistortionFilter.prototype, prototypeAccessors );

    return AmoyBrokenCamDistortionFilter;
}(Filter));

export { AmoyBrokenCamDistortionFilter };
//# sourceMappingURL=filter-broken-cam-distortion.esm.js.map
