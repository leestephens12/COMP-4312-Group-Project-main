/*!
 * @amoy/filter-broken-cam-distortion - v3.0.21
 * Compiled Thu, 21 Nov 2019 07:47:39 UTC
 *
 * @amoy/filter-broken-cam-distortion is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var __filters=function(e,t){"use strict";var n="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",r="varying vec2 vTextureCoord;//passed from vect shader \n\nuniform sampler2D uSampler; // 2d texture\nuniform float uTime;\n\nfloat rand(float co) {\n    return fract(sin(dot(co,12.9898+78.233)) * 43758.5453);\n}\n\nvoid main(void) {\n\tvec2 uv = vTextureCoord;\n\tvec2 uv1 = uv;\n    uv1.y-=rand(uv.x*uTime)/60.;\n    \n    vec4 e = texture2D(uSampler,uv1);\n    vec4 bn = vec4(vec3(e.r+e.g+e.b)/3.,1.0);\n\t\n\tvec2 offset = vec2(0.01*rand(uTime),sin(uTime)/30.);\n\te.r = texture2D(uSampler, uv+offset.xy).r;\n\te.g = texture2D(uSampler, uv).g;\n\te.b = texture2D(uSampler, uv+offset.yx).b;\n\n    if(sin(uTime*rand(uTime))<0.99) {\n        gl_FragColor=mix(e,bn,0.6);\n    } else {\n        uv.y+=rand(uTime)/(sin(uTime)*10.);\n        uv.x-=rand(uTime+2.)/(sin(uTime)*10.)/30.;\n        gl_FragColor=texture2D(uSampler,uv);\n    }\n}",i=function(e){function t(t){void 0===t&&(t=0),e.call(this,n,r),this.delta=t}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var i={delta:{configurable:!0}};return t.prototype.apply=function(e,t,n,r){this.uniforms.uTime=this.delta<=0?0:this.delta,e.applyFilter(this,t,n,r)},i.delta.get=function(){return this.uniforms.uTime},i.delta.set=function(e){this.uniforms.uTime=e},Object.defineProperties(t.prototype,i),t}(t.Filter);return e.AmoyBrokenCamDistortionFilter=i,e}({},PIXI);Object.assign(PIXI.filters,__filters);
//# sourceMappingURL=filter-broken-cam-distortion.js.map
