/*!
 * @amoy/filter-pencil-draw - v3.0.24
 * Compiled Tue, 03 Dec 2019 15:39:17 UTC
 *
 * @amoy/filter-pencil-draw is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var __filters=function(e,n){"use strict";var o="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",r="varying vec2 vTextureCoord;//passed from vect shader\n\nuniform vec4 filterArea;\nuniform sampler2D uSampler;// 2d texture\n\n#define PI2 6.28318530717959\n\n#define RANGE 16.\n#define STEP 2.\n#define ANGLENUM 4.\n\n#define MAGIC_GRAD_THRESH .01\n\n//#define MAGIC_COLOR 1.\n\n#define MAGIC_SENSITIVITY     10.\n// #define MAGIC_COLOR           0.5\nuniform float uColorThreshold;\n\n\nvec4 getCol(vec2 pos)\n{\n        vec2 uv = pos/filterArea.xy;\n        return texture2D(uSampler, uv);\n}\n\nfloat getVal(vec2 pos)\n{\n        vec4 c=getCol(pos);\n        return dot(c.xyz, vec3(0.2126, 0.7152, 0.0722));\n}\n\nvec2 getGrad(vec2 pos, float eps)\n{\n        vec2 d=vec2(eps,0);\n        return vec2(\n                getVal(pos+d.xy)-getVal(pos-d.xy),\n                getVal(pos+d.yx)-getVal(pos-d.yx)\n        )/eps/2.;\n}\n\nvec2 pR(vec2 p, float a) {\n        return cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat absCircular(float t)\n{\n        float a = floor(t + 0.5);\n        return mod(abs(a - t), 1.0);\n}\n\nvoid main(void)\n{\n    vec2 fragCoord=vTextureCoord.xy*filterArea.xy;\n    vec2 pos=fragCoord;\n    float weight=1.;\n    for (float j = 0.; j < ANGLENUM; j += 1.)\n    {\n            vec2 dir = vec2(1, 0);\n            dir = pR(dir, j * PI2 / (2. * ANGLENUM));\n        \n            vec2 grad = vec2(-dir.y, dir.x);\n        \n            for (float i = -RANGE; i <= RANGE; i += STEP)\n            {\n                    vec2 pos2 = pos + normalize(dir)*i;\n            \n                    \n                    if (pos2.y < 0. || pos2.x < 0. || pos2.x > filterArea.x || pos2.y > filterArea.y)\n                    continue;\n            \n                    vec2 g = getGrad(pos2, 1.);\n                    if (length(g) < MAGIC_GRAD_THRESH)\n                    continue;\n            \n                    weight -= pow(abs(dot(normalize(grad), normalize(g))), MAGIC_SENSITIVITY) / floor((2. * RANGE + 1.) / STEP) / ANGLENUM;\n            }\n    }\n    \n    #ifndef GRAYSCALE\n    vec4 col = getCol(pos);\n    #else\n    vec4 col = vec4(getVal(pos));\n    #endif\n    \n    vec4 background = mix(col, vec4(1.), uColorThreshold);\n    \n    float r=length(pos-filterArea.xy*.5)/filterArea.x;\n    float vign=1.-r*r*r;\n    \n    vec4 a=texture2D(uSampler,pos/filterArea.xy);\n    \n    gl_FragColor=vign*mix(vec4(0),background,weight)+a.xxxx/25.;\n    \n}\n",t=function(e){function n(n){void 0===n&&(n=.5),e.call(this,o,r),this.colorThreshold=n}e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n;var t={colorThreshold:{configurable:!0}};return n.prototype.apply=function(e,n,o,r){e.applyFilter(this,n,o,r)},t.colorThreshold.get=function(){return this.uniforms.uColorThreshold},t.colorThreshold.set=function(e){this.uniforms.uColorThreshold=e},Object.defineProperties(n.prototype,t),n}(n.Filter);return e.AmoyPencilDrawFilter=t,e}({},PIXI);Object.assign(PIXI.filters,__filters);
//# sourceMappingURL=filter-pencil-draw.js.map
