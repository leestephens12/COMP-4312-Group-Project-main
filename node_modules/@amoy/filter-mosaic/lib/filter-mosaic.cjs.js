/*!
 * @amoy/filter-mosaic - v3.0.24
 * Compiled Tue, 03 Dec 2019 15:39:17 UTC
 *
 * @amoy/filter-mosaic is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@pixi/core');

var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";

var fragment = "varying vec2 vTextureCoord;//passed from vect shader\nuniform vec4 filterArea;\nuniform sampler2D uSampler;// 2d texture\nuniform float uTileSize;\n\nvoid main(void)\n{\n    \n    vec2 uv=vTextureCoord;\n    if(filterArea.y<filterArea.x){\n        uv.y*=filterArea.y/filterArea.x;\n    }else{\n        uv.x*=filterArea.x/filterArea.y;\n    }\n    \n    uv=uv*uTileSize;\n    \n    uv=floor(uv);\n    \n    uv=uv/uTileSize;\n    \n    vec4 tex=texture2D(uSampler,uv);\n    \n    gl_FragColor=tex;\n}\n";

/**
 * The NTMosaicFilter applies a mosaic effect to an object.<br>
 * @class
 * @see {@link https://www.npmjs.com/package/@amoy/filter-mosaic}
 * @see {@link https://www.npmjs.com/package/@amoy/filters}
 * @extends PIXI.Filter
 * @memberof PIXI.filters
 * @param {number} [tileSize=32] - The maximum size of the tilesize is 64
 */
var AmoyMosaicFilter = /*@__PURE__*/(function (Filter) {
    function AmoyMosaicFilter(tileSize) {
        if ( tileSize === void 0 ) tileSize = 32.0;

        Filter.call(this, vertex, fragment);
        this.uniforms.dimensions = new Float32Array(2);
        this.tileSize = tileSize;
    }

    if ( Filter ) AmoyMosaicFilter.__proto__ = Filter;
    AmoyMosaicFilter.prototype = Object.create( Filter && Filter.prototype );
    AmoyMosaicFilter.prototype.constructor = AmoyMosaicFilter;

    var prototypeAccessors = { tileSize: { configurable: true } };

    /**
     * Override existing apply method in PIXI.Filter
     * @private
     */
    AmoyMosaicFilter.prototype.apply = function apply (filterManager, input, output, clear) {
        this.uniforms.uTileSize = this.tileSize <= 0 ? 32.0 : this.tileSize;
        this.uniforms.dimensions[0] = input.filterFrame.width;
        this.uniforms.dimensions[1] = input.filterFrame.height;
        filterManager.applyFilter(this, input, output, clear);
    };

    /**
     * mosaic tile size
     *
     * @member {number}
     * @default 32.0
     */
    prototypeAccessors.tileSize.get = function () {
        return this.uniforms.uTileSize;
    };

    prototypeAccessors.tileSize.set = function (value) {
        if (value < 0.0 || value > 64.0) {
            value = 32.0;
        }
        this.uniforms.uTileSize = value;
    };

    Object.defineProperties( AmoyMosaicFilter.prototype, prototypeAccessors );

    return AmoyMosaicFilter;
}(core.Filter));

exports.AmoyMosaicFilter = AmoyMosaicFilter;
//# sourceMappingURL=filter-mosaic.cjs.js.map
