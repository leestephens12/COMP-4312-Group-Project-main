/*!
 * @amoy/filter-fisheye - v1.0.0
 * Compiled Thu, 21 Nov 2019 07:47:39 UTC
 *
 * @amoy/filter-fisheye is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var __filters=function(t,n){"use strict";var e="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",r="varying vec2 vTextureCoord;//passed from vect shader \n\nuniform vec4 filterArea;\nuniform sampler2D uSampler;// 2d texture\n\nconst float PI = 3.1415926535;\n\nvoid main(void)\n{\n    float aperture = 178.0;\n    float apertureHalf = 0.5 * aperture * (PI / 180.0);\n    float maxFactor = sin(apertureHalf);\n    \n    vec2 uv;\n    vec2 xy = 2.0 * vTextureCoord.xy - 1.0;\n    float d = length(xy);\n    if (d < (2.0-maxFactor))\n    {\n        d = length(xy * maxFactor);\n        float z = sqrt(1.0 - d * d);\n        float r = atan(d, z) / PI;\n        float phi = atan(xy.y, xy.x);\n        \n        uv.x = r * cos(phi) + 0.5;\n        uv.y = r * sin(phi) + 0.5;\n    }\n    else\n    {\n        uv = vTextureCoord.xy;\n    }\n    vec4 c = texture2D(uSampler, uv);\n\n    gl_FragColor= c;\n}",o=function(t){function n(){t.call(this,e,r)}return t&&(n.__proto__=t),n.prototype=Object.create(t&&t.prototype),n.prototype.constructor=n,n.prototype.apply=function(t,n,e,r){t.applyFilter(this,n,e,r)},n}(n.Filter);return t.AmoyFishEyeFilter=o,t}({},PIXI);Object.assign(PIXI.filters,__filters);
//# sourceMappingURL=filter-fisheye.js.map
