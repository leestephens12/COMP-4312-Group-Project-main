/*!
 * @amoy/filter-vcr - v3.0.21
 * Compiled Thu, 21 Nov 2019 07:47:39 UTC
 *
 * @amoy/filter-vcr is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@pixi/core');

var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";

var fragment = "varying vec2 vTextureCoord;//passed from vect shader \n\nuniform sampler2D uSampler; // 2d texture2D\nuniform vec4 filterArea;\n\nuniform float uTime;\n\n//噪音简化算法，效率高\n// Description : Array and textureless GLSL 2D simplex snoise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-snoise\n//               https://github.com/stegu/webgl-snoise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final snoise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nfloat onOff(float a, float b, float c)\n{\n\treturn step(c, sin(uTime + a*cos(uTime*b)));\n}\n\nfloat ramp(float y, float start, float end)\n{\n\tfloat inside = step(start,y) - step(end,y);\n\tfloat fact = (y-start)/(end-start)*inside;\n\treturn (1.-fact) * inside;\n\t\n}\n\nfloat stripes(vec2 uv)\n{\n\tfloat noi = snoise(uv*vec2(0.5,1.) + vec2(1.,3.));\n\treturn ramp(mod(uv.y*4. + uTime/2.+sin(uTime + sin(uTime*0.63)),1.),0.5,0.6)*noi;\n}\n\nvec3 getVideo(vec2 uv)\n{\n\tvec2 look = uv;\n\tfloat window = 1./(1.+20.*(look.y-mod(uTime/4.,1.))*(look.y-mod(uTime/4.,1.)));\n\tlook.x = look.x + sin(look.y*10. + uTime)/50.*onOff(4.,4.,.3)*(1.+cos(uTime*80.))*window;\n\tfloat vShift = 0.4*onOff(2.,3.,.9)*(sin(uTime)*sin(uTime*20.) + (0.5 + 0.1*sin(uTime*200.)*cos(uTime)));\n\tlook.y = mod(look.y + vShift, 1.);\n\tvec3 video = vec3(texture2D(uSampler,look));\n\treturn video;\n}\n\nvec2 screenDistort(vec2 uv)\n{\n\tuv -= vec2(.5,.5);\n\tuv = uv*1.2*(1./1.2+2.*uv.x*uv.x*uv.y*uv.y);\n\tuv += vec2(.5,.5);\n\treturn uv;\n}\n\nvoid main(void)\n{\n\tvec2 uv = vTextureCoord;\n\tuv = screenDistort(uv);\n\tvec3 video = getVideo(uv);\n\tfloat vigAmt = 3.+.3*sin(uTime + 5.*cos(uTime*5.));\n\tfloat vignette = (1.-vigAmt*(uv.y-.5)*(uv.y-.5))*(1.-vigAmt*(uv.x-.5)*(uv.x-.5));\n\t\n\tvideo += stripes(uv);\n\tvideo += snoise(uv*2.)/2.;\n\tvideo *= vignette;\n\tvideo *= (12.+mod(uv.y*30.+uTime,1.))/13.;\n\t\n\tgl_FragColor = vec4(video,1.0);\n}";

/**
 * @class
 * @see {@link https://www.npmjs.com/package/@amoy/filter-vcr}
 * @see {@link https://www.npmjs.com/package/@amoy/filters}
 * @extends PIXI.Filter
 * @memberof AMOY.filters
 * @param {number} [delta] time for shader animation
 */

var AmoyVcrFilter = /*@__PURE__*/(function (Filter) {
    function AmoyVcrFilter(delta) {
        if ( delta === void 0 ) delta = 0.0;

        Filter.call(this, vertex, fragment);
        // sub class
        this.delta = delta;
    }

    if ( Filter ) AmoyVcrFilter.__proto__ = Filter;
    AmoyVcrFilter.prototype = Object.create( Filter && Filter.prototype );
    AmoyVcrFilter.prototype.constructor = AmoyVcrFilter;

    var prototypeAccessors = { delta: { configurable: true } };

    /**
     * Override existing apply method in PIXI.Filter
     * @private
     */
    AmoyVcrFilter.prototype.apply = function apply (filterManager, input, output, clear) {
        this.uniforms.uTime = this.delta <= 0 ? 2.0 : this.delta;
        filterManager.applyFilter(this, input, output, clear);
    };

    /**
     * time for animation
     *
     * @member {number}
     * @default 0.0
     */
    prototypeAccessors.delta.get = function () {
        return this.uniforms.uTime;
    };

    prototypeAccessors.delta.set = function (value) {
        this.uniforms.uTime = value;
    };

    Object.defineProperties( AmoyVcrFilter.prototype, prototypeAccessors );

    return AmoyVcrFilter;
}(core.Filter));

exports.AmoyVcrFilter = AmoyVcrFilter;
//# sourceMappingURL=filter-vcr.cjs.js.map
