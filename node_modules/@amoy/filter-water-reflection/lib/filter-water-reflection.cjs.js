/*!
 * @amoy/filter-water-reflection - v3.0.21
 * Compiled Thu, 21 Nov 2019 07:47:39 UTC
 *
 * @amoy/filter-water-reflection is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@pixi/core');

var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";

var fragment = "varying vec2 vTextureCoord;//passed from vect shader\n\nuniform sampler2D uSampler;// 2d texture\nuniform vec4 filterArea;\nuniform float boundary;\nuniform float uTime;\n\nvoid main()\n{\n    vec2 uv=vTextureCoord;\n    vec4 waterColor=vec4(1.);\n    float reflactionY=boundary;\n    if(uv.y>reflactionY)\n    {\n        float oy=uv.y;\n        uv.y=2.*reflactionY-uv.y;\n        uv.y=uv.y+sin(1./(oy-reflactionY)+uTime*10.)*.003;\n        waterColor=vec4(.5882,.7529,.9216,1.);\n    }\n    \n    gl_FragColor=texture2D(uSampler,uv)*waterColor;\n}\n";

/**
 * @class
 * @see {@link https://www.npmjs.com/package/@amoy/filter-weather-reflection}
 * @see {@link https://www.npmjs.com/package/@amoy/filters}
 * @extends PIXI.Filter
 * @memberof AMOY.filters
 * @param {number} [delta = 0] time for animation
 */

var AmoyWaterReflectionFilter = /*@__PURE__*/(function (Filter) {
    function AmoyWaterReflectionFilter(delta, boundary) {
        if ( delta === void 0 ) delta = 0.0;
        if ( boundary === void 0 ) boundary = .5;

        Filter.call(this, vertex, fragment);
        // sub class
        this.delta = delta;
        this.boundary = boundary;
    }

    if ( Filter ) AmoyWaterReflectionFilter.__proto__ = Filter;
    AmoyWaterReflectionFilter.prototype = Object.create( Filter && Filter.prototype );
    AmoyWaterReflectionFilter.prototype.constructor = AmoyWaterReflectionFilter;

    var prototypeAccessors = { delta: { configurable: true },boundary: { configurable: true } };

    /**
     * Override existing apply method in PIXI.Filter
     * @private
     */
    AmoyWaterReflectionFilter.prototype.apply = function apply (filterManager, input, output, clear) {
        this.uniforms.uTime = this.delta <= 0 ? 2.0 : this.delta;
        filterManager.applyFilter(this, input, output, clear);
    };

    /**
     * time for animation
     *
     * @member {number}
     * @default 0.0
     */
    prototypeAccessors.delta.get = function () {
        return this.uniforms.uTime;
    };

    prototypeAccessors.delta.set = function (value) {
        this.uniforms.uTime = value;
    };

    /**
     * Vertical position of the reflection point, default is 50% (middle)
     * smaller numbers produce a larger reflection, larger numbers produce a smaller reflection.
     *
     * @member {number}
     * @default 0.5
     */
    prototypeAccessors.boundary.set = function (value) {
        this.uniforms.boundary = value;
    };
    prototypeAccessors.boundary.get = function () {
        return this.uniforms.boundary;
    };

    Object.defineProperties( AmoyWaterReflectionFilter.prototype, prototypeAccessors );

    return AmoyWaterReflectionFilter;
}(core.Filter));

exports.AmoyWaterReflectionFilter = AmoyWaterReflectionFilter;
//# sourceMappingURL=filter-water-reflection.cjs.js.map
