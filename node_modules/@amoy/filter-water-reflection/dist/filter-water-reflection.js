/*!
 * @amoy/filter-water-reflection - v3.0.21
 * Compiled Thu, 21 Nov 2019 07:47:39 UTC
 *
 * @amoy/filter-water-reflection is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var __filters=function(t,e){"use strict";var r="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",n="varying vec2 vTextureCoord;//passed from vect shader\n\nuniform sampler2D uSampler;// 2d texture\nuniform vec4 filterArea;\nuniform float boundary;\nuniform float uTime;\n\nvoid main()\n{\n    vec2 uv=vTextureCoord;\n    vec4 waterColor=vec4(1.);\n    float reflactionY=boundary;\n    if(uv.y>reflactionY)\n    {\n        float oy=uv.y;\n        uv.y=2.*reflactionY-uv.y;\n        uv.y=uv.y+sin(1./(oy-reflactionY)+uTime*10.)*.003;\n        waterColor=vec4(.5882,.7529,.9216,1.);\n    }\n    \n    gl_FragColor=texture2D(uSampler,uv)*waterColor;\n}\n",o=function(t){function e(e,o){void 0===e&&(e=0),void 0===o&&(o=.5),t.call(this,r,n),this.delta=e,this.boundary=o}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var o={delta:{configurable:!0},boundary:{configurable:!0}};return e.prototype.apply=function(t,e,r,n){this.uniforms.uTime=this.delta<=0?2:this.delta,t.applyFilter(this,e,r,n)},o.delta.get=function(){return this.uniforms.uTime},o.delta.set=function(t){this.uniforms.uTime=t},o.boundary.set=function(t){this.uniforms.boundary=t},o.boundary.get=function(){return this.uniforms.boundary},Object.defineProperties(e.prototype,o),e}(e.Filter);return t.AmoyWaterReflectionFilter=o,t}({},PIXI);Object.assign(PIXI.filters,__filters);
//# sourceMappingURL=filter-water-reflection.js.map
