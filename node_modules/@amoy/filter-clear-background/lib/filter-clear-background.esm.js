/*!
 * @amoy/filter-clear-background - v3.0.28
 * Compiled Tue, 03 Dec 2019 15:39:17 UTC
 *
 * @amoy/filter-clear-background is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
import { Filter } from '@pixi/core';

var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";

var fragment = "varying vec2 vTextureCoord;//passed from vect shader \n\nuniform vec4 filterArea;\nuniform sampler2D uSampler;// 2d texture\n\nuniform vec3 uColor;\nuniform float uOffset;\n\n\nvec3 rgb2hsl(vec3 rgb)\n{\n    float h;\n    float s;\n    float l;\n\n    float maxval = max(rgb.r , max(rgb.g, rgb.b));\n    float minval = min(rgb.r, min(rgb.g, rgb.b));\n    float delta = maxval - minval;\n \n    l = (minval + maxval) / 2.0;\n    s = 0.0;\n    if (l > 0.0 && l < 1.0)\n        s = delta / (l < 0.5 ? 2.0 * l : 2.0 - 2.0 * l);\n    h = 0.0;\n    if (delta > 0.0)\n    {\n        if (rgb.r == maxval && rgb.g != maxval)\n            h += (rgb.g - rgb.b ) / delta;\n        if (rgb.g == maxval && rgb.b != maxval)\n            h += 2.0  + (rgb.b - rgb.r) / delta;\n        if (rgb.b == maxval && rgb.r != maxval)\n            h += 4.0 + (rgb.r - rgb.g) / delta;\n        h *= 60.0;\n    }\n\n    return vec3(h,s,l);\n}\n\n\nvoid main( )\n{\n    vec2 uv = vTextureCoord;\n    vec4 c = texture2D(uSampler, vTextureCoord);\n\n    vec3 hsl;\n    hsl = rgb2hsl(c.rgb);\n\n    vec3 hsl1;\n    hsl1 = rgb2hsl(uColor);\n\n    float a = 1.;\n    if(abs(hsl.x - hsl1.x) < uOffset &&(abs(hsl.y - hsl1.y) < uOffset) && (abs(hsl.z - hsl1.z) < uOffset)){\n        a = 0.0;\n    }\n\n    c *= a;\n    gl_FragColor = c;\n}";

/**
 * @class
 * @see {@link https://www.npmjs.com/package/@amoy/filter-clear-background}
 * @see {@link https://www.npmjs.com/package/@amoy/filters}
 * @extends PIXI.Filter
 * @memberof AMOY.filters
 * @param {object} [{r:1.0, g:0, b:0}] default color for clear
 * @param {number} [offset=5.0] the color offset range [0, 20]
 */

var AmoyClearBackgroundFilter = /*@__PURE__*/(function (Filter) {
    function AmoyClearBackgroundFilter(color, offset) {
        if ( color === void 0 ) color={r:1.0, g:0, b:0};
        if ( offset === void 0 ) offset=5.;

        Filter.call(this, vertex, fragment);
        // sub class
        this.uniforms.uColor  = new Float32Array(3);
        this.offset = offset;
        this._color = {r:color.r, g:color.g, b:color.b};
    }

    if ( Filter ) AmoyClearBackgroundFilter.__proto__ = Filter;
    AmoyClearBackgroundFilter.prototype = Object.create( Filter && Filter.prototype );
    AmoyClearBackgroundFilter.prototype.constructor = AmoyClearBackgroundFilter;

    var prototypeAccessors = { color: { configurable: true },offset: { configurable: true } };

    /**
     * Override existing apply method in PIXI.Filter
     * @private
     */
    AmoyClearBackgroundFilter.prototype.apply = function apply (filterManager, input, output, clear) {
        this.uniforms.uColor[0] = this._color.r;
        this.uniforms.uColor[1] = this._color.g;
        this.uniforms.uColor[2] = this._color.b;
        this.uniforms.uOffset = this.offset;
        filterManager.applyFilter(this, input, output, clear);
    };

    /**
     *  the color is need to be removed
     * @member {object}
     */
    prototypeAccessors.color.get = function (){
        return this._color;
    };

    prototypeAccessors.color.set = function (value) {
        this._color = value;
        this.uniforms.uColor[0] = value.r;
        this.uniforms.uColor[1] = value.g;
        this.uniforms.uColor[2] = value.b;
    };

    prototypeAccessors.offset.get = function (){
        return this.uniforms.uOffset;
    };

    prototypeAccessors.offset.set = function (value) {
        this.uniforms.uOffset = value;
    };

    Object.defineProperties( AmoyClearBackgroundFilter.prototype, prototypeAccessors );

    return AmoyClearBackgroundFilter;
}(Filter));

export { AmoyClearBackgroundFilter };
//# sourceMappingURL=filter-clear-background.esm.js.map
