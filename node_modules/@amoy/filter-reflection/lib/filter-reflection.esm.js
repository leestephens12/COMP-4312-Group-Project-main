/*!
 * @amoy/filter-reflection - v3.0.21
 * Compiled Thu, 21 Nov 2019 07:47:39 UTC
 *
 * @amoy/filter-reflection is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
import { Filter } from '@pixi/core';

var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";

var fragment = "varying vec2 vTextureCoord;//passed from vect shader\n\nuniform sampler2D uSampler;// 2d texture\nuniform vec4 filterArea;\n\nvoid main(void)\n{\n\tvec2 uv;\n\tuv.x=vTextureCoord.x;\n\tuv.y=1.-vTextureCoord.y;\n\t\n\tgl_FragColor=texture2D(uSampler,uv)*uv.y;\n}";

/**
 * @class
 * @see {@link https://www.npmjs.com/package/@amoy/filter-reflection}
 * @see {@link https://www.npmjs.com/package/@amoy/filters}
 * @extends PIXI.Filter
 * @memberof AMOY.filters
 */

var AmoyReflectionFilter = /*@__PURE__*/(function (Filter) {
    function AmoyReflectionFilter() {
        Filter.call(this, vertex, fragment);
        // sub class
    }

    if ( Filter ) AmoyReflectionFilter.__proto__ = Filter;
    AmoyReflectionFilter.prototype = Object.create( Filter && Filter.prototype );
    AmoyReflectionFilter.prototype.constructor = AmoyReflectionFilter;

    /**
     * Override existing apply method in PIXI.Filter
     * @private
     */
    AmoyReflectionFilter.prototype.apply = function apply (filterManager, input, output, clear) {
        filterManager.applyFilter(this, input, output, clear);
    };

    return AmoyReflectionFilter;
}(Filter));

export { AmoyReflectionFilter };
//# sourceMappingURL=filter-reflection.esm.js.map
