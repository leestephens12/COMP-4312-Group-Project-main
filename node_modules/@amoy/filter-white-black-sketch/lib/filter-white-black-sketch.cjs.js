/*!
 * @amoy/filter-white-black-sketch - v3.0.21
 * Compiled Thu, 21 Nov 2019 07:47:39 UTC
 *
 * @amoy/filter-white-black-sketch is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@pixi/core');

var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";

var fragment = "varying vec2 vTextureCoord;//passed from vect shader \n\nuniform sampler2D uSampler;// 2d texture2D\nuniform vec4 filterArea;\n\nuniform int uInvertColor;\nuniform float uTime;\n\nfloat rand(float x)\n{\n    return fract(sin(x)*43758.5453);\n}\n\nfloat triangle(float x)\n{\n    return abs(1.-mod(abs(x),2.))*2.-1.;\n}\n\nvoid main()\n{\n    float time=floor(uTime*16.)/16.;\n    \n    vec2 uv=vTextureCoord;\n    \n    // pixel position\n    vec2 p=uv;\n    p+=vec2(triangle(p.y*rand(time)*4.)*rand(time*1.9)*.015,\n    triangle(p.x*rand(time*3.4)*4.)*rand(time*2.1)*.015);\n    p+=vec2(rand(p.x*3.1+p.y*8.7)*.01,\n    rand(p.x*1.1+p.y*6.7)*.01);\n    \n    // vec2 blurredUV = vec2(p.x+0.003,p.y+0.003);\n    // vec4 baseColor = vec4(texture(iChannel0, blurredUV).rgb,1.);\n\n    vec4 baseColor=vec4(texture2D(uSampler,uv).rgb,1.);\n    vec4 edges=1.-(baseColor/vec4(texture2D(uSampler,p).rgb,1.));\n    \n    if(uInvertColor>0){\n        baseColor.rgb=vec3(baseColor.r);\n        gl_FragColor=baseColor/vec4(length(edges));\n    }else{\n        gl_FragColor=vec4(length(edges));\n    }\n}";

/**
 * @class
 * @extends PIXI.Filter
 * @see {@link https://www.npmjs.com/package/@amoy/filter-white-black-sketch}
 * @see {@link https://www.npmjs.com/package/@amoy/filters}
 * @memberof AMOY.filters
 * @param {boolean} [invertColor = false] invertcolor true or false
 * @param {number} [delta = 0] time for animation
 */

var AmoyWhiteBlackSketchFilter = /*@__PURE__*/(function (Filter) {
    function AmoyWhiteBlackSketchFilter(invertColor, delta) {
        if ( invertColor === void 0 ) invertColor = false;
        if ( delta === void 0 ) delta = 0.0;

        Filter.call(this, vertex, fragment);
        // sub class
        this._invertColor = invertColor;
        this.invertColor = invertColor;
        this.delta = delta;
    }

    if ( Filter ) AmoyWhiteBlackSketchFilter.__proto__ = Filter;
    AmoyWhiteBlackSketchFilter.prototype = Object.create( Filter && Filter.prototype );
    AmoyWhiteBlackSketchFilter.prototype.constructor = AmoyWhiteBlackSketchFilter;

    var prototypeAccessors = { invertColor: { configurable: true },delta: { configurable: true } };

    /**
     * Override existing apply method in PIXI.Filter
     * @private
     */
    AmoyWhiteBlackSketchFilter.prototype.apply = function apply (filterManager, input, output, clear) {
        this.uniforms.uInvertColor = this.invertColor ? 1 : 0;
        this.uniforms.uTime = this.delta;
        filterManager.applyFilter(this, input, output, clear);
    };

    /**
     * color invert boolean
     */
    prototypeAccessors.invertColor.get = function () {
        return this._invertColor;
    };

    prototypeAccessors.invertColor.set = function (value) {
        this._invertColor = value;
        this.uniforms.uInvertColor = value ? 1 : 0;
    };

    /**
     * time for animation
     *
     * @member {number}
     * @default 0.0
     */
    prototypeAccessors.delta.get = function () {
        return this.uniforms.uTime;
    };

    prototypeAccessors.delta.set = function (value) {
        this.uniforms.uTime = value;
    };

    Object.defineProperties( AmoyWhiteBlackSketchFilter.prototype, prototypeAccessors );

    return AmoyWhiteBlackSketchFilter;
}(core.Filter));

exports.AmoyWhiteBlackSketchFilter = AmoyWhiteBlackSketchFilter;
//# sourceMappingURL=filter-white-black-sketch.cjs.js.map
