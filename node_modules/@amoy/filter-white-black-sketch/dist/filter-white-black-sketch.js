/*!
 * @amoy/filter-white-black-sketch - v3.0.21
 * Compiled Thu, 21 Nov 2019 07:47:39 UTC
 *
 * @amoy/filter-white-black-sketch is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var __filters=function(e,r){"use strict";var n="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",t="varying vec2 vTextureCoord;//passed from vect shader \n\nuniform sampler2D uSampler;// 2d texture2D\nuniform vec4 filterArea;\n\nuniform int uInvertColor;\nuniform float uTime;\n\nfloat rand(float x)\n{\n    return fract(sin(x)*43758.5453);\n}\n\nfloat triangle(float x)\n{\n    return abs(1.-mod(abs(x),2.))*2.-1.;\n}\n\nvoid main()\n{\n    float time=floor(uTime*16.)/16.;\n    \n    vec2 uv=vTextureCoord;\n    \n    // pixel position\n    vec2 p=uv;\n    p+=vec2(triangle(p.y*rand(time)*4.)*rand(time*1.9)*.015,\n    triangle(p.x*rand(time*3.4)*4.)*rand(time*2.1)*.015);\n    p+=vec2(rand(p.x*3.1+p.y*8.7)*.01,\n    rand(p.x*1.1+p.y*6.7)*.01);\n    \n    // vec2 blurredUV = vec2(p.x+0.003,p.y+0.003);\n    // vec4 baseColor = vec4(texture(iChannel0, blurredUV).rgb,1.);\n\n    vec4 baseColor=vec4(texture2D(uSampler,uv).rgb,1.);\n    vec4 edges=1.-(baseColor/vec4(texture2D(uSampler,p).rgb,1.));\n    \n    if(uInvertColor>0){\n        baseColor.rgb=vec3(baseColor.r);\n        gl_FragColor=baseColor/vec4(length(edges));\n    }else{\n        gl_FragColor=vec4(length(edges));\n    }\n}",o=function(e){function r(r,o){void 0===r&&(r=!1),void 0===o&&(o=0),e.call(this,n,t),this._invertColor=r,this.invertColor=r,this.delta=o}e&&(r.__proto__=e),r.prototype=Object.create(e&&e.prototype),r.prototype.constructor=r;var o={invertColor:{configurable:!0},delta:{configurable:!0}};return r.prototype.apply=function(e,r,n,t){this.uniforms.uInvertColor=this.invertColor?1:0,this.uniforms.uTime=this.delta,e.applyFilter(this,r,n,t)},o.invertColor.get=function(){return this._invertColor},o.invertColor.set=function(e){this._invertColor=e,this.uniforms.uInvertColor=e?1:0},o.delta.get=function(){return this.uniforms.uTime},o.delta.set=function(e){this.uniforms.uTime=e},Object.defineProperties(r.prototype,o),r}(r.Filter);return e.AmoyWhiteBlackSketchFilter=o,e}({},PIXI);Object.assign(PIXI.filters,__filters);
//# sourceMappingURL=filter-white-black-sketch.js.map
