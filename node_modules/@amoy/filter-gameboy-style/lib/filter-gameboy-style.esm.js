/*!
 * @amoy/filter-gameboy-style - v3.0.24
 * Compiled Tue, 03 Dec 2019 15:39:17 UTC
 *
 * @amoy/filter-gameboy-style is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
import { Filter } from '@pixi/core';

var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";

var fragment = "varying vec2 vTextureCoord;//passed from vect shader \n\nuniform sampler2D uSampler;// 2d texture\nuniform vec4 filterArea;\n\nuniform float uPosx;\nuniform float uPosy;\nuniform float uTime;\n\nvoid main(){\n\tvec2 fragCoord=vTextureCoord*filterArea.xy;\n\tvec2 uv=fragCoord.xy/filterArea.xy;\n\tconst float resolution=160.;//步长\n\tuv=floor(uv*resolution)/resolution;// 0 or 1\n\t\n\tvec3 color=texture2D(uSampler,uv).rgb;\n\t\n\tfloat intensity=(color.r+color.g+color.b)/3.;\n\tint index=int(intensity*4.);\n\n\tif(index == 0){\n\t\tgl_FragColor=vec4(vec3(15./255., 56./255., 15./255.),1.);\n\t}else if(index == 1){\n\t\tgl_FragColor=vec4(vec3(48./255., 98./255., 48./255.),1.);\n\t}else if(index == 2){\n\t\tgl_FragColor=vec4(vec3(139./255., 172./255., 15./255.),1.);\n\t}else{\n\t\tgl_FragColor=vec4(vec3(155./255., 188./255., 15./255.),1.);\n\t}\n}";

/**
 *
 *  * The AmoyGameboyStyleFilter applies the effect to an object.<br>
 * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/AmoyGameboyStyleFilter.png)
 *
 * @class
 * @see {@link https://www.npmjs.com/package/@amoy/filter-gameboy-style}
 * @see {@link https://www.npmjs.com/package/@amoy/filters}
 * @extends PIXI.Filter
 * @memberof AMOY.filters
 */

var AmoyGameboyStyleFilter = /*@__PURE__*/(function (Filter) {
    function AmoyGameboyStyleFilter() {
        Filter.call(this, vertex, fragment);
        // sub class
    }

    if ( Filter ) AmoyGameboyStyleFilter.__proto__ = Filter;
    AmoyGameboyStyleFilter.prototype = Object.create( Filter && Filter.prototype );
    AmoyGameboyStyleFilter.prototype.constructor = AmoyGameboyStyleFilter;

    /**
     * Override existing apply method in PIXI.Filter
     * @private
     */
    AmoyGameboyStyleFilter.prototype.apply = function apply (filterManager, input, output, clear) {
        filterManager.applyFilter(this, input, output, clear);
    };

    return AmoyGameboyStyleFilter;
}(Filter));

export { AmoyGameboyStyleFilter };
//# sourceMappingURL=filter-gameboy-style.esm.js.map
