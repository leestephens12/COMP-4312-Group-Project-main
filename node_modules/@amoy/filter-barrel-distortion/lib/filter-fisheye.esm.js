/*!
 * @amoy/filter-fisheye - v1.0.0
 * Compiled Thu, 21 Nov 2019 05:54:09 UTC
 *
 * @amoy/filter-fisheye is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
import { Filter } from '@pixi/core';

var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";

var fragment = "varying vec2 vTextureCoord;//passed from vect shader \n\nuniform vec4 filterArea;\nuniform sampler2D uSampler;// 2d texture\n\nconst float PI = 3.1415926535;\n\nvoid main(void)\n{\n    float aperture = 178.0;\n    float apertureHalf = 0.5 * aperture * (PI / 180.0);\n    float maxFactor = sin(apertureHalf);\n    \n    vec2 uv;\n    vec2 xy = 2.0 * vTextureCoord.xy - 1.0;\n    float d = length(xy);\n    if (d < (2.0-maxFactor))\n    {\n        d = length(xy * maxFactor);\n        float z = sqrt(1.0 - d * d);\n        float r = atan(d, z) / PI;\n        float phi = atan(xy.y, xy.x);\n        \n        uv.x = r * cos(phi) + 0.5;\n        uv.y = r * sin(phi) + 0.5;\n    }\n    else\n    {\n        uv = vTextureCoord.xy;\n    }\n    vec4 c = texture2D(uSampler, uv);\n\n    gl_FragColor= c;\n}";

/**
 * @class
 * @see {@link https://www.npmjs.com/package/@amoy/filter-fisheye}
 * @see {@link https://www.npmjs.com/package/@amoy/filters}
 * @extends PIXI.Filter
 * @memberof AMOY.filters
 */

var AmoyFishEyeFilter = /*@__PURE__*/(function (Filter) {
    function AmoyFishEyeFilter() {
        Filter.call(this, vertex, fragment);

    }

    if ( Filter ) AmoyFishEyeFilter.__proto__ = Filter;
    AmoyFishEyeFilter.prototype = Object.create( Filter && Filter.prototype );
    AmoyFishEyeFilter.prototype.constructor = AmoyFishEyeFilter;

    /**
     * Override existing apply method in PIXI.Filter
     * @private
     */
    AmoyFishEyeFilter.prototype.apply = function apply (filterManager, input, output, clear) {
        filterManager.applyFilter(this, input, output, clear);
    };

    return AmoyFishEyeFilter;
}(Filter));

export { AmoyFishEyeFilter };
//# sourceMappingURL=filter-fisheye.esm.js.map
