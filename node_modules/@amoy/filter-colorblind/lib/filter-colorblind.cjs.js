/*!
 * @amoy/filter-colorblind - v3.0.29
 * Compiled Wed, 04 Dec 2019 07:31:38 UTC
 *
 * @amoy/filter-colorblind is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@pixi/core');

var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";

var fragment = "varying vec2 vTextureCoord;//passed from vect shader\n\nuniform vec4 filterArea;\nuniform sampler2D uSampler;// 2d texture\nuniform float m[20];\n\nfloat fu(float n){\n    return(n<0.?0.:(n<1.?n:1.));\n}\n\nvec4 colorMatrix(vec4 o){\n    float r=((o.r*m[0])+(o.g*m[1])+(o.b*m[2])+(o.a*m[3])+m[4]);\n    float g=((o.r*m[5])+(o.g*m[6])+(o.b*m[7])+(o.a*m[8])+m[9]);\n    float b=((o.r*m[10])+(o.g*m[11])+(o.b*m[12])+(o.a*m[13])+m[14]);\n    float a=((o.r*m[15])+(o.g*m[16])+(o.b*m[17])+(o.a*m[18])+m[19]);\n    \n    return vec4(fu(r),fu(g),fu(b),fu(a));\n    \n}\n\nvoid main(void)\n{\n    vec4 col=texture2D(uSampler,vTextureCoord);\n    \n    gl_FragColor=colorMatrix(col);\n    \n}";

var AMOY_CLORBLINDE_TYPE_ENUM = {
    Protanopia:1,
    Protanomaly:2,
    Deuteranopia:3,
    Deuteranomaly:4,
    Tritanopia:5,
    Tritanomaly:6,
    Achromatopsia:7,
    Achromatomaly:8
};

var Protanopia = [0.567,0.433,0,0,0, 0.558,0.442,0,0,0, 0,0.242,0.758,0,0, 0,0,0,1,0, 0,0,0,0,1];

var Protanomaly= [0.817,0.183,0,0,0, 0.333,0.667,0,0,0, 0,0.125,0.875,0,0, 0,0,0,1,0, 0,0,0,0,1];

var Deuteranopia= [0.625,0.375,0,0,0, 0.7,0.3,0,0,0, 0,0.3,0.7,0,0, 0,0,0,1,0, 0,0,0,0,1];

var Deuteranomaly = [0.8,0.2,0,0,0, 0.258,0.742,0,0,0, 0,0.142,0.858,0,0, 0,0,0,1,0, 0,0,0,0,1];

var Tritanopia = [0.95,0.05,0,0,0, 0,0.433,0.567,0,0, 0,0.475,0.525,0,0, 0,0,0,1,0, 0,0,0,0,1];

var Tritanomaly = [0.967,0.033,0,0,0, 0,0.733,0.267,0,0, 0,0.183,0.817,0,0, 0,0,0,1,0, 0,0,0,0,1];

var Achromatopsia = [0.299,0.587,0.114,0,0, 0.299,0.587,0.114,0,0, 0.299,0.587,0.114,0,0, 0,0,0,1,0, 0,0,0,0,1];

var Achromatomaly = [0.618,0.320,0.062,0,0, 0.163,0.775,0.062,0,0, 0.163,0.320,0.516,0,0,0,0,0,1,0,0,0,0,0];

/**
 * @class
 * @see {@link https://www.npmjs.com/package/@amoy/filter-Warhol}
 * @see {@link https://www.npmjs.com/package/@amoy/filters}
 * @extends PIXI.Filter
 * @memberof AMOY.filters
 */

var AmoyColorblindFilter = /*@__PURE__*/(function (Filter) {
    function AmoyColorblindFilter() {
        Filter.call(this, vertex, fragment);
        // sub class
        this.blindType = AMOY_CLORBLINDE_TYPE_ENUM.Protanopia;
    }

    if ( Filter ) AmoyColorblindFilter.__proto__ = Filter;
    AmoyColorblindFilter.prototype = Object.create( Filter && Filter.prototype );
    AmoyColorblindFilter.prototype.constructor = AmoyColorblindFilter;

    var prototypeAccessors = { blindType: { configurable: true } };

    /**
     * Override existing apply method in PIXI.Filter
     * @private
     */
    AmoyColorblindFilter.prototype.apply = function apply (filterManager, input, output, clear) {
        filterManager.applyFilter(this, input, output, clear);
    };

    prototypeAccessors.blindType.set = function (value){
        this._blindType = value;
        switch(this._blindType) {
            case AMOY_CLORBLINDE_TYPE_ENUM.Protanopia:{
                this.uniforms.m = Protanopia;
                break;
            }
            case AMOY_CLORBLINDE_TYPE_ENUM.Protanomaly:{
                this.uniforms.m = Protanomaly;
                break;
            }
            case AMOY_CLORBLINDE_TYPE_ENUM.Tritanopia:{
                this.uniforms.m = Tritanopia;
                break;
            }
            case AMOY_CLORBLINDE_TYPE_ENUM.Tritanomaly:{
                this.uniforms.m = Tritanomaly;
                break;
            }
            case AMOY_CLORBLINDE_TYPE_ENUM.Deuteranopia:{
                this.uniforms.m = Deuteranopia;
                break;
            }
            case AMOY_CLORBLINDE_TYPE_ENUM.Deuteranomaly:{
                this.uniforms.m = Deuteranomaly;
                break;
            }
            case AMOY_CLORBLINDE_TYPE_ENUM.Achromatopsia:{
                this.uniforms.m = Achromatopsia;
                break;
            }
            case AMOY_CLORBLINDE_TYPE_ENUM.Achromatomaly:{
                this.uniforms.m = Achromatomaly;
                break;
            }
        }
    };

    prototypeAccessors.blindType.get = function (){
        return this._blindType;
    };

    Object.defineProperties( AmoyColorblindFilter.prototype, prototypeAccessors );

    return AmoyColorblindFilter;
}(core.Filter));

exports.AMOY_CLORBLINDE_TYPE_ENUM = AMOY_CLORBLINDE_TYPE_ENUM;
exports.AmoyColorblindFilter = AmoyColorblindFilter;
//# sourceMappingURL=filter-colorblind.cjs.js.map
